# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

input AddCategoriesToBrandInput {
  brandId: Int!
  categories: [Int!]!
}

input AddItemCartInput {
  itemId: Int!
  qty: Int!
}

input AddItemImagesInput {
  image: [String!]!
  itemId: Int!
  productId: Int!
}

input AddProductAttributeInput {
  name: String!
  productId: Int!
  value: String!
}

input AddProductImagesInput {
  image: [String!]!
  productId: Int!
}

input AddProductItemInput {
  SKU: String!
  price: Float!
  productId: Int!
  qtyInStock: Int!
  variationsItem: [CreateVariationItemInput!]
}

input AddTagsToProductInput {
  productId: Int!
  productTags: [String!]!
}

type Address {
  address: String!
  city: City
  cityId: Int!
  country: Country
  countryId: Int!
  id: Int!
  postalCode: String!
  state: State
  stateId: Int!
  streetNumber: String
}

type Attribute {
  id: Int!
  name: String!
  value: String!
}

type AuthResponse {
  token: String!
}

type Brand {
  category: [Category!]!
  description: String!
  id: Int!
  image: String!
  name: String!
}

input BrandFilter {
  name: String
  orderBy: BrandOrderBy
  skip: Int
  take: Int
}

input BrandOrderBy {
  name: String
}

type Cart {
  cartItem: [CartItem!]
  subtotal: Float
}

type CartItem {
  item: [ItemWithQty!]!
  price: Float!
  product: ProductType!
}

type Category {
  description: String!
  id: Int!
  image: String!
  name: String!
  parentId: Int
  product: [Product!]!
}

type City {
  cityName: String!
  id: Int!
}

type Country {
  countryCode: String!
  countryName: String!
  id: Int!
  state: [State!]
}

input CreateAddressInput {
  address: String!
  cityId: Int!
  countryId: Int!
  postalCode: String!
  stateId: Int!
  streetNumber: String!
}

input CreateBrandInput {
  categories: [Int!]
  description: String
  image: String
  name: String!
}

input CreateCategoryInput {
  description: String
  image: String
  name: String!
}

input CreateCityInput {
  cityName: String!
}

input CreateCountryInput {
  countryCode: String!
  countryName: String!
  state: [CreateStateInput!]
}

input CreateOrderInput {
  addressId: Int
  email: String!
  name: String!
  paymentOptionId: Int!
  phone: String!
  shippingAddress: CreateAddressInput
  shoppingMethodId: Int!
}

input CreatePaymentInput {
  name: String!
}

input CreateProductAttributeInput {
  name: String!
  value: String!
}

input CreateProductInput {
  attributes: [CreateProductAttributeInput!]
  available: Boolean! = true
  brandId: Float
  categoriesIds: [Int!]
  coverImage: String!
  description: String!
  image: [String!]
  name: String!
  productItem: [CreateProductItemInput!]
  productTag: [String!]
  variation: [CreateVariationInput!]
}

input CreateProductItemInput {
  SKU: String!
  price: Float!
  qtyInStock: Int!
  variationsItem: [CreateVariationItemInput!]
}

input CreateReviewInput {
  productId: Float!
  rating: Float!
  review: String!
}

input CreateShoppingMethodInput {
  active: Boolean! = true
  name: String!
  price: Float!
}

input CreateStateInput {
  city: [CreateCityInput!]
  stateCode: String!
  stateName: String!
}

input CreateTagInput {
  value: String!
}

input CreateTaxInput {
  active: Boolean! = true
  countryCode: String!
  name: String!
  stateCode: String!
  taxRate: Float!
}

input CreateUserInput {
  email: String!
  password: String!
  phone_number: String!
  user_type: String!
  username: String!
}

input CreateVariationInput {
  name: String!
  variationOption: [CreateVariationOptionInput!]!
}

input CreateVariationItemInput {
  nameVariation: String!
  valueVariation: String!
}

input CreateVariationOptionInput {
  value: String!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type FavoritesList {
  product: Product
  productId: Int!
}

input FavoritesListInput {
  productId: Int!
}

type Filter {
  brand: [Brand!]
  category: [Category!]
  maxPrice: Float
  minPrice: Float
  variationFilter: [VariationFilter!]
}

input FilterDTO {
  averageRating: Float
  brand: Int
  brandId: Float
  category: String
  categoryId: Int
  maxPrice: Float
  minPrice: Float
  name: String
  variationOptions: String
}

type Image {
  id: Int!
  imagePath: String!
}

type ItemWithQty {
  id: Float!
  price: Float!
  productId: Float!
  qty: Float!
  variationsItem: [VariationsItem!]!
}

input LogInInput {
  email: String!
  password: String!
}

type Mutation {
  addAddress(createAddressInput: CreateAddressInput!): User!
  addAttribute(addProductAttributeInput: AddProductAttributeInput!): Product!
  addCategoriesToBrand(addCategoriesToBrandInput: AddCategoriesToBrandInput!): Brand!
  addCategoryToProduct(productCategoryInput: ProductCategoryInput!): Product!
  addImagesToItem(addItemImagesInput: AddItemImagesInput!): Product!
  addImagesToProduct(addProductImagesInput: AddProductImagesInput!): Product!
  addItemToCart(addItemCartInput: AddItemCartInput!): Boolean!
  addProductItem(addProductItemInput: AddProductItemInput!): Product!
  addProductToFavoritesList(favoritesListInput: FavoritesListInput!): [FavoritesList!]!
  addTagsToProduct(addTagsToProductInput: AddTagsToProductInput!): Boolean!
  blockUsersByIds(userIdsDTO: UserIdsDTO!): Boolean!
  cancelOrderById(id: Int!): Order!
  createBrand(createBrandInput: CreateBrandInput!): Brand!
  createCategory(createCategoryInput: CreateCategoryInput!): Category!
  createCountry(createCountryInput: CreateCountryInput!): Country!
  createOrder(createOrderInput: CreateOrderInput!): Boolean!
  createPayment(createPaymentInput: CreatePaymentInput!): Payment!
  createProduct(createProductInput: CreateProductInput!): Product!
  createReview(createReviewInput: CreateReviewInput!): Review!
  createShoppingMethod(createShoppingMethodInput: CreateShoppingMethodInput!): ShoppingMethod!
  createTag(createTagInput: CreateTagInput!): Tag!
  createTax(createTaxInput: CreateTaxInput!): Tax!
  createUser(createUserInput: CreateUserInput!): Boolean!
  deleteAddress(removeAddressInput: RemoveAddressInput!): Boolean!
  deleteProductItem(removeItemInput: RemoveItemInput!): Boolean!
  editUserType(updateUsersTypeDTO: UpdateUsersTypeDTO!): Boolean!
  emptyTheShoppingCart: Cart!
  findUserById(userId: Int!): User!
  login(loginInput: LogInInput!): AuthResponse!
  removeAttribute(removeAttributeInput: RemoveAttributeInput!): Boolean!
  removeBrand(id: Int!): Boolean!
  removeCategory(id: Int!): Boolean!
  removeCategoryFromBrand(removeCategoryFromBrandInput: RemoveCategoryFromBrandInput!): Boolean!
  removeCategoryFromProduct(productCategoryInput: ProductCategoryInput!): Boolean!
  removeCity(id: Int!): Boolean!
  removeCountry(id: Int!): Boolean!
  removeImageFromItem(removeItemImageInput: RemoveItemImageInput!): Boolean!
  removeImageFromProduct(removeProductImageInput: RemoveProductImageInput!): Boolean!
  removeItemFromCart(addItemCartInput: AddItemCartInput!): Cart!
  removeOrder(id: Int!): Order!
  removePayment(id: Int!): Boolean!
  removeProduct(id: Int!): Boolean!
  removeProductFromFavoritesList(favoritesListInput: FavoritesListInput!): [FavoritesList!]!
  removeReview(productId: Int!): Boolean!
  removeShoppingMethod(id: Int!): Boolean!
  removeState(id: Int!): Boolean!
  removeTag(id: Int!): Boolean!
  removeTagFromProduct(removeTagFromProductInput: RemoveTagFromProductInput!): Boolean!
  removeTax(id: Int!): Boolean!
  removeUser(id: Int!): Boolean!
  singIn(singInInput: SignInInput!): AuthResponse!
  unblockUsersByIds(userIdsDTO: UserIdsDTO!): Boolean!
  updateAddress(updateAddressInput: UpdateAddressInput!): User!
  updateAttribute(updateProductAttributeInput: UpdateProductAttributeInput!): Product!
  updateBrand(updateBrandInput: UpdateBrandInput!): Brand!
  updateCart(updateItemCartInput: UpdateItemCartInput!): Cart!
  updateCategory(updateCategoryInput: UpdateCategoryInput!): Category!
  updateCity(updateCityInput: UpdateCityInput!): City!
  updateCountry(updateCountryInput: UpdateCountryInput!): Country!
  updateOrder(updateOrderInput: UpdateOrderInput!): Order!
  updatePayment(updatePaymentInput: UpdatePaymentInput!): Payment!
  updateProduct(updateProductInput: UpdateProductInput!): Product!
  updateProductItem(updateProductItemInput: UpdateProductItemInput!): Product!
  updateReview(updateReviewInput: UpdateReviewInput!): Review!
  updateShoppingMethod(updateShoppingMethodInput: UpdateShoppingMethodInput!): ShoppingMethod!
  updateState(updateStateInput: UpdateStateInput!): State!
  updateTag(updateTagInput: UpdateTagInput!): Tag!
  updateTax(updateTaxInput: UpdateTaxInput!): Tax!
  updateVariation(updateVariationInput: UpdateVariationInput!): Product!
  updateVariationOption(updateVariationOptionInput: UpdateVariationOptionInput!): Product!
  uploadImage(image: Upload!): UploadImage!
}

type Order {
  address: Address
  addressId: Int!
  createdAt: DateTime!
  email: String!
  id: Int!
  name: String!
  orderItem: [OrderItem!]
  paymentOption: Payment
  paymentOptionId: Int!
  phone: String!
  shoppingMethod: ShoppingMethod
  shoppingMethodId: Int
  status: String!
  subTotal: Float!
  tax: Tax
  taxId: Int
  taxes: Float!
  total: Float!
  updatedAt: DateTime!
  user: User
  userId: Int!
}

type OrderItem {
  orderId: Int!
  price: Float!
  product: Product
  productId: Int!
  productItem: ProductItem
  productItemId: Int!
  qty: Int!
}

type Payment {
  id: Int!
  name: String!
}

type Product {
  attributes: [Attribute!]
  available: Boolean!
  averageRating: Float!
  brand: Brand
  category: [Category!]
  coverImage: String!
  description: String!
  id: Int!
  name: String!
  productImage: [Image!]
  productItem: [ProductItem!]
  productTag: [Tag!]
  relatedProducts: [Product!]
  reviewCount: Int!
  userReview: [Review!]
  variation: [Variation!]
}

input ProductCategoryInput {
  categoryId: Float!
  productId: Int!
}

input ProductFilterDTO {
  filter: FilterDTO
  orderBy: ProductOrderBy
  skip: Int
  take: Int
}

type ProductItem {
  ItemImages: [Image!]
  SKU: String!
  id: Int!
  price: Float!
  qtyInStock: Int!
  variationsItem: [VariationItem!]
}

enum ProductOrderBy {
  AvgCustomerReview
  NewProduct
  PriceHighToLow
  PriceLowToHigh
}

type ProductType {
  coverImage: String!
  id: Float!
  name: String!
}

type Query {
  DashboardUsers(userFilterDTO: UserFilterDTO): [User!]!
  FavoritesList: [FavoritesList!]!
  brand(id: Int!): Brand!
  brands(brandFilter: BrandFilter): [Brand!]!
  cart: Cart!
  category(id: Int!): Category!
  country(id: Int!): Country!
  filter(filterDTO: FilterDTO): Filter!
  order(id: Int!): Order!
  orders: [Order!]!
  payment(id: Int!): Payment!
  payments: [Payment!]!
  product(id: Int!): Product!
  products(productFilterDTO: ProductFilterDTO): [Product!]!
  shoppingMethod(id: Int!): ShoppingMethod!
  tag(id: Int!): Tag!
  tax(id: Int!): Tax!
  user: User!
}

input RemoveAddressInput {
  addressId: Int!
}

input RemoveAttributeInput {
  attributeId: Int!
  productId: Int!
}

input RemoveCategoryFromBrandInput {
  brandId: Int!
  categoryId: Int!
}

input RemoveItemImageInput {
  ItemImageId: Int!
  productId: Int!
}

input RemoveItemInput {
  itemId: Int!
  productId: Int!
}

input RemoveProductImageInput {
  productId: Int!
  productImageId: Int!
}

input RemoveTagFromProductInput {
  productId: Int!
  tagId: Int!
}

type Review {
  id: Int!
  rating: Float!
  review: String!
  userId: Int!
}

type ShoppingMethod {
  id: Int!
  name: String!
  price: Float!
}

input SignInInput {
  email: String!
  password: String!
  phone_number: String!
  username: String!
}

type State {
  city: [City!]
  id: Int!
  stateCode: String!
  stateName: String!
}

type Tag {
  id: Int!
  value: String!
}

type Tax {
  countryCode: String!
  id: Int!
  name: String!
  stateCode: String!
  taxRate: Float!
}

input UpdateAddressInput {
  address: String
  cityId: Float
  countryId: Float
  id: Int!
  postalCode: String
  region: String
  stateId: Float
  streetNumber: String
}

input UpdateBrandInput {
  description: String
  id: Int!
  image: String
  name: String
}

input UpdateCategoryInput {
  description: String
  id: Int!
  image: String
  name: String
}

input UpdateCityInput {
  cityName: String
  id: Int!
}

input UpdateCountryInput {
  countryCode: String
  countryName: String
  id: Int!
}

input UpdateItemCartInput {
  itemId: Int!
  qty: Int!
}

input UpdateOrderInput {
  id: Int!
  status: String!
}

input UpdatePaymentInput {
  id: Int!
  name: String
}

input UpdateProductAttributeInput {
  attributeId: Int!
  name: String
  productId: Int!
  value: String
}

input UpdateProductInput {
  available: Boolean
  brandId: Float
  coverImage: String
  description: String
  id: Int!
  image: [String!]
  name: String
}

input UpdateProductItemInput {
  SKU: String
  price: Float
  productId: Int!
  productItemId: Int!
  qtyInStock: Int
  variationsItem: [UpdateVariationItemInput!]
}

input UpdateReviewInput {
  productId: Int!
  rating: Float
  review: String
}

input UpdateShoppingMethodInput {
  active: Boolean
  id: Int!
  name: String
  price: Float
}

input UpdateStateInput {
  id: Int!
  stateCode: String
  stateName: String
}

input UpdateTagInput {
  id: Int!
  value: String!
}

input UpdateTaxInput {
  active: Boolean
  countryCode: String
  id: Int!
  name: String
  stateCode: String
  taxRate: Float
}

input UpdateUsersTypeDTO {
  userType: String!
  usersIds: [Int!]!
}

input UpdateVariationInput {
  name: String
  productId: Int!
  variationId: Int!
}

input UpdateVariationItemInput {
  nameVariation: String!
  valueVariation: String!
}

input UpdateVariationOptionInput {
  id: Int!
  productId: Int!
  value: String
  variationId: Int!
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

type UploadImage {
  createdAt: DateTime!
  filename: String!
  id: Int!
  path: String!
}

type User {
  address: [Address!]
  city: City!
  country: Country!
  email: String!
  id: Int!
  isBlock: Boolean!
  phone_number: String!
  state: State!
  user_type: String!
  username: String!
}

input UserFilterDTO {
  filter: WhereUserFilterDTO
  orderBy: UserOrderBy
  skip: Int
  take: Int
}

input UserIdsDTO {
  usersIds: [Int!]!
}

enum UserOrderBy {
  AToZByEmail
  AToZByName
  NewUser
  OldUser
  ZToAByEmail
  ZToAByName
}

type Variation {
  id: Int!
  name: String!
  variationOptions: [VariationOption!]
}

type VariationFilter {
  name: String!
  variationOptionFilter: [VariationOptionFilter!]!
}

type VariationItem {
  nameVariation: String!
  valueVariation: String!
}

type VariationOption {
  id: Int!
  value: String!
}

type VariationOptionFilter {
  value: String!
}

type VariationsItem {
  value: String!
}

input WhereUserFilterDTO {
  email: String
  isBlock: Boolean
  phone_number: String
  userType: String
  username: String
}