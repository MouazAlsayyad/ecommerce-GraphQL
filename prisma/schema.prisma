// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserType {
  USER
  SELLER
  ADMIN
}

enum FileType {
  Image
  Video
}

model User {
  id            Int             @id @default(autoincrement())
  username      String          @unique
  email         String          @unique
  password      String
  phone_number  String          @unique
  isBlock       Boolean         @default(false)
  user_type     UserType
  created_at    DateTime        @default(now())
  updated_at    DateTime        @updatedAt @default(now()) 
  cart          Cart?
  product       Product[]
  favoritesList FavoritesList[]
  addresses     Address[]
  userReview    UserReview[]
  order         Order[]
}

model UserReview {
  id         Int      @id @default(autoincrement())
  review     String
  rating     Float
  userId     Int
  productId  Int
  user       User     @relation(fields: [userId], references: [id])
  product    Product  @relation(fields: [productId], references: [id])
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt @default(now())
}

model FavoritesList {
  userId Int
  user   User        @relation(fields: [userId], references: [id])
  productId Int
  product   Product @relation(fields: [productId], references: [id])

  @@id([userId, productId])
}

model Cart {
  id        Int         @id @default(autoincrement())
  user      User        @relation(fields: [userId], references: [id])
  userId    Int         @unique
  cartItems CartItems[]
}

model CartItems {
  productId Int
  itemId    Int
  cartId    Int
  qty       Int
  cart      Cart        @relation(fields: [cartId], references: [id])
  item      ProductItem @relation(fields: [itemId], references: [id])
  product   Product     @relation(fields: [productId], references: [id])

  @@id([cartId, itemId])
}

model Country {
  id           Int       @id @default(autoincrement())
  country_name String
  addresses    Address[]
}

model Address {
  id            Int     @id @default(autoincrement())
  userId        Int
  countryId     Int
  street_number String
  address       String
  city          String
  region        String
  postal_code   String
  user          User    @relation(fields: [userId], references: [id])
  country       Country @relation(fields: [countryId], references: [id])
}

model Variation {
  id                   Int                    @id @default(autoincrement())
  name                 String
  productId            Int
  product              Product                @relation(fields: [productId], references: [id])
  variationOptions     VariationOption[]
  productConfiguration ProductConfiguration[]
}

model VariationOption {
  id                   Int                    @id @default(autoincrement())
  value                String
  variationId          Int
  variation            Variation              @relation(fields: [variationId], references: [id])
  productConfiguration ProductConfiguration[]
}

model Product {
  id                          Int                     @id @default(autoincrement())
  name                        String
  description                 String
  coverImage                  String
  available                   Boolean
  brandId                     Int?
  userId                      Int
  brand                       Brand?                  @relation(fields: [brandId], references: [id])
  favouritesList              FavoritesList[]
  image                       String[]
  attributes                  ProductAttribute[]
  productImage                ProductImage[]
  variation                   Variation[]
  productItem                 ProductItem[]
  userReview                  UserReview[]
  cartItems                   CartItems[]
  product_category            Product_Category[]
  product_tag                 Product_Tag[]
  user                        User                    @relation(fields: [userId], references: [id])
  orderItem                   OrderItem[]
  averageRating               Float?                  @default(0)
  reviewCount                 Int?                    @default(0)
  createdAt                   DateTime                @default(now())
  updatedAt                   DateTime                @updatedAt @default(now())

}

model Tag{
  id        Int      @id @default(autoincrement())
  value   String
  product_tag   Product_Tag[]
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt @default(now())
}

model Product_Tag {
  tagId         Int
  productId     Int
  tag           Tag      @relation(fields: [tagId], references: [id])
  product       Product  @relation(fields: [productId], references: [id])
  
  @@id([tagId, productId])
}

model ProductImage{
  id                   Int                    @id @default(autoincrement())
  imagePath            String
  productId Int
  product   Product @relation(fields: [productId], references: [id])
}

model ProductItem {
  id                    Int                    @id @default(autoincrement())
  SKU                   String
  qtyInStock            Int
  price                 Float
  productId             Int
  product               Product                @relation(fields: [productId], references: [id])
  productConfiguration  ProductConfiguration[]
  cartItems             CartItems[]
  ItemImages            ItemImage[]
  orderItems            OrderItem[]
  updatedAt        DateTime           @updatedAt @default(now())
}


model ItemImage{
  id                   Int                    @id @default(autoincrement())
  imagePath            String
  productItemId        Int
  productItem   ProductItem @relation(fields: [productItemId], references: [id])
}

model ProductConfiguration {
  productItemId     Int
  // productId         Int            
  variationId       Int
  variationOptionId Int
  variationOption   VariationOption @relation(fields: [variationOptionId], references: [id])
  productItem       ProductItem     @relation(fields: [productItemId], references: [id])
  // product           Product         @relation(fields: [productId], references: [id])
  variation         Variation       @relation(fields: [variationId], references: [id])

  @@id([productItemId, variationId])
}

model ProductAttribute {
  id        Int     @id @default(autoincrement())
  productId Int
  name      String
  value     String
  product   Product @relation(fields: [productId], references: [id])
}

model Image {
  id                      Int        @id @default(autoincrement())
  filename                String     
  path                    String     @unique
  createdAt               DateTime  @default(now())
}

model Media {
  id               Int      @id @default(autoincrement())
  filename         String
  fileType         FileType
  path             String
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt @default(now())
}

model Category {
  id               Int                @id @default(autoincrement())
  name             String             @unique
  description      String?
  image            String?
  parentId         Int?
  parent           Category?          @relation("Subcategories", fields: [parentId], references: [id])
  subcategories    Category[]         @relation("Subcategories")
  brand_category   Brand_Category[]
  product_category Product_Category[]
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt @default(now())
}

model Brand {
  id             Int              @id @default(autoincrement())
  name           String           @unique
  description    String?
  image          String?
  brand_category Brand_Category[]
  product        Product[]
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt @default(now())
}

model Brand_Category {
  brandId    Int
  categoryId Int
  brand      Brand    @relation(fields: [brandId], references: [id])
  category   Category @relation(fields: [categoryId], references: [id])

  @@id([brandId, categoryId])
}

model Product_Category {
  categoryId         Int
  productId          Int
  category           Category @relation(fields: [categoryId], references: [id])
  product            Product  @relation(fields: [productId], references: [id])

  @@id([categoryId, productId])
}

model OrderStatus {
  id                    Int         @id @default(autoincrement())
  status                String
  order                 Order[]
}


model ShoppingMethod {
  id                    Int         @id @default(autoincrement())
  name                  String
  price                 Float
  order                 Order[]
}


model Tax {
  id                    Int         @id @default(autoincrement())
  name                  String
  taxRate               Float
  orderTax              OrderTax[]
}

model OrderTax{
  taxId                   Int  
  tax                     Tax             @relation(fields: [taxId], references: [id])
  orderId                 Int  
  order                   Order             @relation(fields: [orderId], references: [id])
  @@id([taxId,orderId])
}

model PaymentOption{
  id                      Int         @id @default(autoincrement())
  name                    String
  order                   Order[]
}

model Order {
  id                    Int             @id @default(autoincrement())
  name                  String
  shippingAddress       String 
  email                 String
  phone                 String
  subTotal              Float
  total                 Float
  userId                Int   
  user                  User             @relation(fields: [userId], references: [id])
  paymentOptionId       Int              
  paymentOption         PaymentOption    @relation(fields: [paymentOptionId], references: [id])
  orderTax              OrderTax[]
  statusId              Int          
  status                OrderStatus      @relation(fields: [statusId], references: [id])
  shoppingMethodId      Int   
  shoppingMethod        ShoppingMethod   @relation(fields: [shoppingMethodId], references: [id])
  orderItem             OrderItem[]         
  createdAt             DateTime         @default(now())
  updatedAt             DateTime         @updatedAt @default(now())
}

model OrderItem {
  productId Int
  orderId               Int
  productItemId         Int
  qty                   Int
  order                 Order            @relation(fields: [orderId], references: [id])
  product               Product          @relation(fields: [productId], references: [id])
  productItem           ProductItem      @relation(fields: [productItemId], references: [id])
  @@id([orderId,productItemId])
}